<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Teacher Signup</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* General Styles */
    body {
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(135deg, #000428, #004e92);
      color: #fff;
      margin: 0;
      padding: 0;
      transition: background 0.5s ease;
    }

    .container {
      background: rgba(255, 255, 255, 0.1);
      padding: 2rem;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      width: 90%;
      max-width: 500px;
      text-align: center;
      animation: fadeIn 1s ease-in-out;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      margin: 2rem auto;
    }

    h1 {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
      color: #00bcd4;
      animation: slideDown 0.8s ease-in-out;
    }

    .input-group {
      position: relative;
      margin: 1rem 0;
    }

    .input-group i {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #00bcd4;
      font-size: 1.2rem;
    }

    input, select {
      width: calc(100% - 3rem);
      padding: 0.8rem 0.8rem 0.8rem 2.5rem;
      margin: 0.5rem 0;
      border: 2px solid #00bcd4;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
      font-size: 1rem;
      outline: none;
      transition: all 0.3s ease;
    }

    input:focus, select:focus {
      border-color: #ff4081;
      transform: scale(1.05);
    }

    button {
      width: 100%;
      padding: 0.8rem;
      margin-top: 1rem;
      background: #00bcd4;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    button:hover {
      background: #ff4081;
      transform: scale(1.05);
    }

    .footer {
      margin-top: 1.5rem;
      font-size: 0.9rem;
      color: #aaa;
    }

    .footer a {
      color: #00bcd4;
      text-decoration: none;
      margin: 0 0.5rem;
      transition: color 0.3s ease;
    }

    .footer a:hover {
      color: #ff4081;
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes slideDown {
      from { transform: translateY(-20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Teacher Signup</h1>

    <form action="/api/teacher/signup" method="POST">
      <div class="input-group">
        <i class="fas fa-user"></i>
        <input type="text" name="username" placeholder="Username" required>
      </div>

      <div class="input-group">
        <i class="fas fa-envelope"></i>
        <input type="email" name="email" placeholder="Email" required>
      </div>

      <div class="input-group">
        <i class="fas fa-lock"></i>
        <input type="password" name="password" placeholder="Password" required>
      </div>

      <button type="submit">Sign Up</button>
    </form>

    <div class="footer">
      <p>Already have an account? <a href="/teacher/login">Login</a></p>
    </div>
  </div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Teacher Login</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Same styles as the signup page */
    /* You can copy-paste the CSS from above */
  </style>
</head>
<body>
  <div class="container">
    <h1>Teacher Login</h1>

    <form action="/api/teacher/login" method="POST">
      <div class="input-group">
        <i class="fas fa-envelope"></i>
        <input type="email" name="email" placeholder="Email" required>
      </div>

      <div class="input-group">
        <i class="fas fa-lock"></i>
        <input type="password" name="password" placeholder="Password" required>
      </div>

      <button type="submit">Login</button>
    </form>

    <div class="footer">
      <p>Don't have an account? <a href="/teacher/signup">Sign Up</a></p>
    </div>
  </div>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Signup</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Same styles as the signup page for Teacher */
    /* You can copy-paste the CSS from above */
  </style>
</head>
<body>
  <div class="container">
    <h1>Student Signup</h1>

    <form action="/api/student/signup" method="POST">
      <div class="input-group">
        <i class="fas fa-user"></i>
        <input type="text" name="username" placeholder="Username" required>
      </div>

      <div class="input-group">
        <i class="fas fa-lock"></i>
        <input type="password" name="password" placeholder="Password" required>
      </div>

      <div class="input-group">
        <i class="fas fa-user"></i>
        <input type="text" name="name" placeholder="Full Name" required>
      </div>

      <div class="input-group">
        <i class="fas fa-calendar"></i>
        <input type="text" name="year" placeholder="Year" required>
      </div>

      <div class="input-group">
        <i class="fas fa-school"></i>
        <input type="text" name="studentClass" placeholder="Class" required>
      </div>

      <div class="input-group">
        <i class="fas fa-book"></i>
        <input type="text" name="term" placeholder="Term" required>
      </div>

      <button type="submit">Sign Up</button>
    </form>

    <div class="footer">
      <p>Already have an account? <a href="/student/login">Login</a></p>
    </div>
  </div>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Login</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Same styles as the signup page for Teacher */
    /* You can copy-paste the CSS from above */
  </style>
</head>
<body>
  <div class="container">
    <h1>Student Login</h1>

    <form action="/api/student/login" method="POST">
      <div class="input-group">
        <i class="fas fa-user"></i>
        <input type="text" name="username" placeholder="Username" required>
      </div>

      <div class="input-group">
        <i class="fas fa-lock"></i>
        <input type="password" name="password" placeholder="Password" required>
      </div>

      <button type="submit">Login</button>
    </form>

    <div class="footer">
      <p>Don't have an account? <a href="/student/signup">Sign Up</a></p>
    </div>
  </div>
</body>
</html>



const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const MongoStore = require('connect-mongo'); // MongoDB session store
const { Teacher, Student, hashPassword, comparePassword } = require('./models');
const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// MongoDB Connection
const uri = 'mongodb+srv://yourMongoDBUriHere';
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

// Use MongoDB session store
app.use(session({
  store: MongoStore.create({ mongoUrl: uri }), // Store sessions in MongoDB
  resave: false,
  saveUninitialized: false, // Don't store empty sessions
  cookie: { secure: false }, // For development, change to true in production if using https
}));

// Teacher Signup
app.post('/api/teacher/signup', async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const hashedPassword = await hashPassword(password);
    const newTeacher = new Teacher({ username, email, password: hashedPassword });
    await newTeacher.save();
    res.status(201).send('Teacher registered successfully');
  } catch (error) {
    res.status(400).send('Error registering teacher');
  }
});

// Teacher Login
app.post('/api/teacher/login', async (req, res) => {
  const { email, password } = req.body;
  const teacher = await Teacher.findOne({ email });

  if (!teacher) return res.status(400).send('Teacher not found');

  const isMatch = await comparePassword(password, teacher.password);

  if (!isMatch) return res.status(400).send('Invalid password');

  // Store user info in session
  req.session.teacherId = teacher._id;
  res.send('Teacher logged in successfully');
});

// Student Signup
app.post('/api/student/signup', async (req, res) => {
  const { username, password, name, surname, year, studentClass, term } = req.body;
  try {
    const hashedPassword = await hashPassword(password);
    const newStudent = new Student({
      username,
      password: hashedPassword,
      name,
      surname,
      year,
      class: studentClass,
      term
    });
    await newStudent.save();
    res.status(201).send('Student registered successfully');
  } catch (error) {
    res.status(400).send('Error registering student');
  }
});

// Student Login
app.post('/api/student/login', async (req, res) => {
  const { username, password } = req.body;
  const student = await Student.findOne({ username });

  if (!student) return res.status(400).send('Student not found');

  const isMatch = await comparePassword(password, student.password);

  if (!isMatch) return res.status(400).send('Invalid password');

  // Store user info in session
  req.session.studentId = student._id;
  res.send('Student logged in successfully');
});

// Middleware to protect routes for Teachers
const protectTeacherRoute = (req, res, next) => {
  if (!req.session.teacherId) return res.status(401).send('Please log in as a teacher');
  next();
};

// Middleware to protect routes for Students
const protectStudentRoute = (req, res, next) => {
  if (!req.session.studentId) return res.status(401).send('Please log in as a student');
  next();
};

// Get Teacher Profile (protected)
app.get('/api/teacher/profile', protectTeacherRoute, async (req, res) => {
  const teacher = await Teacher.findById(req.session.teacherId);
  res.send(teacher);
});

// Get Student Profile (protected)
app.get('/api/student/profile', protectStudentRoute, async (req, res) => {
  const student = await Student.findById(req.session.studentId);
  res.send(student);
});

// Get Student Reports (protected)
app.get('/api/student/reports', protectStudentRoute, async (req, res) => {
  const student = await Student.findById(req.session.studentId);
  res.send(student.subjects); // Send subjects and grades
});

// Logout Route
app.post('/api/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) return res.status(500).send('Failed to log out');
    res.send('Logged out successfully');
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


